import { VirtualEstate } from "@prisma/client";
import { Decimal } from "@prisma/client/runtime/library";
import { kRing } from "h3-js";

import { Injectable } from "@nestjs/common";

import { ServiceException } from "../lib/exceptions/service-exception";
import { generateFlakeID } from "../lib/generate-id/generate-flake-id";
import { PrismaService } from "../lib/prisma/prisma.service";

const GENESIS_VIRTUAL_ESTATE_PRICE = 10;

@Injectable()
export class VirtualEstateService {
  constructor(private prisma: PrismaService) {}

  async getOneVirtualEstate(hexID: string): Promise<VirtualEstate> {
    const virtualEstate = await this.prisma.virtualEstate.findFirst({
      where: {
        virtualEstateID: hexID,
      },
      include: {
        owner: true,
      },
    });

    return virtualEstate;
  }

  async getAllVirtualEstatesForSignedUser(
    userId: string,
    size: number,
    page: number,
  ): Promise<{ myVirtualEstates: VirtualEstate[]; totalCount: number }> {
    const query = {
      ownerID: userId,
    };

    const virtualEstates = await this.prisma.virtualEstate.findMany({
      where: query,
      include: {
        owner: true,
      },
      take: +size,
      skip: +(page - 1) * size,
    });

    const totalCount = await this.prisma.virtualEstate.count({
      where: query,
    });

    return { myVirtualEstates: virtualEstates, totalCount: totalCount };
  }

  async mintVirtualEstate({
    userID,
    hexID,
  }: {
    userID: string;
    hexID: string;
  }): Promise<VirtualEstate> {
    return this.prisma.$transaction(async (prisma) => {
      const balance = await prisma.rechargeRecords.aggregate({
        where: {
          ownerID: userID,
        },
        _sum: {
          amount: true,
        },
      });

      if (balance._sum.amount < new Decimal(GENESIS_VIRTUAL_ESTATE_PRICE)) {
        throw new ServiceException("Not enough balance", "NOT_ENOUGH_BALANCE");
      }

      // Create a virtual estate with the given hexID and the ownerID
      const virtualEstatePromise = prisma.virtualEstate.create({
        data: {
          // VirtualEstateID is a unique identifier for a virtual estate,
          // it's generated by H3HexagonLayer with the resolution of 12
          virtualEstateID: hexID,

          lastPrice: GENESIS_VIRTUAL_ESTATE_PRICE,

          ownerID: userID,
        },
      });

      const transactionID = BigInt(generateFlakeID());

      // Create a transaction record for the minting
      const transactionRecordPromise =
        prisma.virtualEstateTransactionRecords.create({
          data: {
            virtualEstateID: hexID,
            transactionID: transactionID,

            price: GENESIS_VIRTUAL_ESTATE_PRICE,

            buyerID: userID,
            sellerID: "ONE_PI",
          },
        });

      // Create a recharge record for the minting
      const rechargeRecordPromise = prisma.rechargeRecords.create({
        data: {
          amount: -GENESIS_VIRTUAL_ESTATE_PRICE,
          externalID: transactionID.toString(),

          reason: "MINT_VIRTUAL_ESTATE",
          ownerID: userID,
        },
      });
      // TODO(Hanggi): Create a recharge record for Mr.ONE_PI

      const [virtualEstate] = await Promise.all([
        virtualEstatePromise,
        transactionRecordPromise,
        rechargeRecordPromise,
      ]);

      return virtualEstate;
    });
  }

  async getHexIDsStatusInArea({
    hexID,
  }: {
    hexID: string;
  }): Promise<{ onSale: string[]; sold?: string[] }> {
    const hexIDsInArea = kRing(hexID, 15).map((hex) => {
      return hex;
    });
    const virtualEstatesHasOwner = await this.prisma.virtualEstate.findMany({
      select: {
        virtualEstateID: true, // 只选择 id 字段
      },
      where: {
        virtualEstateID: {
          in: hexIDsInArea,
        },
      },
    });

    return {
      onSale: [],
      sold: virtualEstatesHasOwner.map((ve) => ve.virtualEstateID) || [],
    };
  }

  async getVirtualEstateTotalMinted(endDate: Date, startDate: Date):Promise<number> {
    try {
      const virtualEstateMinted = await this.prisma.virtualEstate.count({
        where: {
          createdAt: { gte: startDate, lte: endDate },
        },
      });

      return virtualEstateMinted;
    } catch (error) {
      throw error;
    }
  }
}
