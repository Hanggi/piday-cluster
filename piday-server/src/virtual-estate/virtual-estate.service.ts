import { VirtualEstate, VirtualEstateListing } from "@prisma/client";
import { Decimal } from "@prisma/client/runtime/library";
import { h3ToGeo, kRing } from "h3-js";

import { Injectable } from "@nestjs/common";

import { ServiceException } from "../lib/exceptions/service-exception";
import { generateFlakeID } from "../lib/generate-id/generate-flake-id";
import { PrismaService } from "../lib/prisma/prisma.service";
import { ZERO_DECIMAL } from "../lib/prisma/utils/zerro-decimal";

const GENESIS_VIRTUAL_ESTATE_PRICE = 10;

@Injectable()
export class VirtualEstateService {
  constructor(private prisma: PrismaService) {}

  async getOneVirtualEstate(
    hexID: string,
    optional?: {
      withListing: boolean;
    },
  ): Promise<{ ve: VirtualEstate; listing: VirtualEstateListing }> {
    const virtualEstate = await this.prisma.virtualEstate.findFirst({
      where: {
        virtualEstateID: hexID,
      },
      include: {
        owner: true,
      },
    });

    let listing = null;
    if (optional?.withListing) {
      // Get listing for the virtual estate
      listing = await this.prisma.virtualEstateListing.findFirst({
        where: {
          virtualEstateID: hexID,
          type: "ASK",
          expiresAt: {
            gt: new Date(),
          },
        },
      });
    }

    return { ve: virtualEstate, listing };
  }

  async getAllVirtualEstatesForSignedUser(
    userId: string,
    size: number,
    page: number,
  ): Promise<{ myVirtualEstates: VirtualEstate[]; totalCount: number }> {
    const query = {
      ownerID: userId,
    };

    const virtualEstates = await this.prisma.virtualEstate.findMany({
      where: query,
      include: {
        owner: true,
      },
      take: +size,
      skip: +(page - 1) * size,
    });

    const totalCount = await this.prisma.virtualEstate.count({
      where: query,
    });

    return { myVirtualEstates: virtualEstates, totalCount: totalCount };
  }

  async mintVirtualEstate({
    userID,
    hexID,
  }: {
    userID: string;
    hexID: string;
  }): Promise<VirtualEstate> {
    return this.prisma.$transaction(async (prisma) => {
      const balance = await prisma.rechargeRecords.aggregate({
        where: {
          ownerID: userID,
        },
        _sum: {
          amount: true,
        },
      });

      if (balance._sum.amount < new Decimal(GENESIS_VIRTUAL_ESTATE_PRICE)) {
        throw new ServiceException("Not enough balance", "NOT_ENOUGH_BALANCE");
      }

      // Create a virtual estate with the given hexID and the ownerID
      const virtualEstatePromise = prisma.virtualEstate.create({
        data: {
          // VirtualEstateID is a unique identifier for a virtual estate,
          // it's generated by H3HexagonLayer with the resolution of 12
          virtualEstateID: hexID,

          lastPrice: GENESIS_VIRTUAL_ESTATE_PRICE,

          ownerID: userID,
        },
      });

      const transactionID = BigInt(generateFlakeID());

      // Create a transaction record for the minting
      const transactionRecordPromise =
        prisma.virtualEstateTransactionRecords.create({
          data: {
            virtualEstateID: hexID,
            transactionID: transactionID,

            price: GENESIS_VIRTUAL_ESTATE_PRICE,

            buyerID: userID,
            sellerID: "ONE_PI",
          },
        });

      // Create a recharge record for the minting
      const rechargeRecordPromise = prisma.rechargeRecords.create({
        data: {
          amount: -GENESIS_VIRTUAL_ESTATE_PRICE,
          externalID: transactionID.toString(),

          reason: "MINT_VIRTUAL_ESTATE",
          ownerID: userID,
        },
      });
      // TODO(Hanggi): Create a recharge record for Mr.ONE_PI

      const [virtualEstate] = await Promise.all([
        virtualEstatePromise,
        transactionRecordPromise,
        rechargeRecordPromise,
      ]);

      return virtualEstate;
    });
  }

  async getHexIDsStatusInArea({
    hexID,
    zoom,
  }: {
    hexID: string;
    zoom: number;
  }): Promise<{ onSale: string[]; sold?: string[] }> {
    const hexIDsInArea = kRing(hexID, 15).map((hex) => {
      return hex;
    });

    const virtualEstatesHasOwner = await this.prisma.virtualEstate.findMany({
      select: {
        virtualEstateID: true, // 只选择 id 字段
      },
      where: {
        virtualEstateID: {
          in: hexIDsInArea,
        },
      },
    });

    const virtualEstateOnSale = await this.prisma.virtualEstateListing.findMany(
      {
        select: {
          virtualEstateID: true, // 只选择 id 字段
        },
        where: {
          virtualEstateID: {
            in: hexIDsInArea,
          },
          expiresAt: {
            gte: new Date(),
          },
        },
      },
    );
    return {
      onSale: virtualEstateOnSale.map((ve) => ve.virtualEstateID) || [],
      sold: virtualEstatesHasOwner.map((ve) => ve.virtualEstateID) || [],
    };
  }
  async getSoldHexIDsCoordinatesForScatterPlot({
    hexID,
    zoom,
  }: {
    hexID: string;
    zoom: number;
  }): Promise<{ coordinates?: number[][] }> {
    const adjustedZoom = Math.max(0.64, Math.min(zoom, 20));

    const hexIDsInArea = kRing(hexID, 500 - (adjustedZoom - 0.64) * 5).map(
      (hex) => {
        return hex;
      },
    );

    const virtualEstatesHasOwner = await this.prisma.virtualEstate.findMany({
      select: {
        virtualEstateID: true, // 只选择 id 字段
      },
      where: {
        virtualEstateID: {
          in: hexIDsInArea,
        },
      },
    });

    return {
      coordinates: virtualEstatesHasOwner.map((c) =>
        h3ToGeo(c.virtualEstateID),
      ),
    };
  }

  async getVirtualEstateTotalMinted(
    endDate: Date,
    startDate: Date,
  ): Promise<number> {
    try {
      const virtualEstateMinted = await this.prisma.virtualEstate.count({
        where: {
          createdAt: { gte: startDate, lte: endDate },
        },
      });

      return virtualEstateMinted;
    } catch (error) {
      throw error;
    }
  }

  async transferVirtualEstate(
    hexID: string,
    receiverID: string,
    ownerID: string,
  ) {
    return this.prisma.$transaction(async (prisma) => {
      const virtualEstate = await prisma.virtualEstate.findUnique({
        where: {
          virtualEstateID: hexID,
        },
      });
      if (virtualEstate.ownerID !== ownerID)
        throw new ServiceException("Not owns this virtual estate", "NOT_OWNER");

      const receiver = await prisma.user.findUnique({
        where: {
          keycloakID: receiverID,
        },
      });

      if (!receiver)
        throw new ServiceException("user does not exist", "USER_NOT_FOUND");

      await prisma.virtualEstate.update({
        data: {
          ownerID: receiver.keycloakID,
        },
        where: {
          virtualEstateID: hexID,
        },
      });
      const transactionID = BigInt(generateFlakeID());
      const transaction = await prisma.virtualEstateTransactionRecords.create({
        data: {
          transactionID: transactionID,
          buyerID: receiver.keycloakID,
          price: ZERO_DECIMAL,
          sellerID: ownerID,
          virtualEstateID: virtualEstate.virtualEstateID,
        },
      });

      return {
        ...transaction,
        transactionID: transaction.transactionID.toString(),
      };
    });
  }
}
